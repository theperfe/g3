1.html:
- Just some test file.
- I am able to put a button and write something in the document after pressing this button.
- I tried both input-type-button and button-type-button tags to create buttons, and both of them worked the same.

2.html:
- This is just some random code I tried on d3 inspired by Mike Bostock's talk. It did not work at all.

3.html:
- Just some random code to test svg, d3.select etc.

4.html to 8.html:
- Trying the codes mentioned on http://christopheviau.com/d3_tutorial/.

9.html:
- Here I tried to create a circle on the click of a mouse. It did create circles when I clicked on svg canvas, but not near the mouse click. By this time I did not know how to capture the mouse click. Thanks to SSAD project students' code, I learnt that later :) 

10.html:
- I tried making the text inside the circles visible. But it is a very brute force method. It does not bind the text and the circles, I just gave the same coordinates to both text and circles.

11.html: 
- Not different from 10.html. Dont know why I stored it as a separate file. There is only one line difference actually.

12.html:
- This code is copied from http://www.janwillemtulp.com/2011/03/23/tutorial-line-interpolations-in-d3/. (Since this is the time when I am trying to learn various things about d3 and testing various codes on it.)

13.html:
- Just realized that d3's force layout library is the best for me and it does all the things I was planning to do. 
- Trying to create a force layout graph using the functions of d3. 
- I was able to create a nodes as many as I want by hard-coding since I still couldnt read from a file.
- I did not create any labels.

14.html:
- Am able to create a link as well, but by hardcoding.

15.html:
- Finally discovered how to add a node by clicking the mouse itself :) 
- But still I need to be able to add links by clicking on source node and target node. That is not implemented here.

16.html:
- This is just the first example from this video: http://vimeo.com/29458354.
- I couldnt run later examples since their code is not given in the video or the slides.

17.html:
- Trying to see if we can add text to nodes, but at this time I did not know how to bind them to the circles. When I click mouse on svg canvas, it would add the node and text at the same spot, but the node would move while the text wouldn't.

18.html:
- This is the same as 15.html but just that I added a good no. of nodes to start with so that I could show this to Navjyoti sir.

19.html:
- Here I tried to add links by clicking on the source node and target node. Didn't work :( 
- Also I tried to see the labels of the nodes at least when I hover over them since I anyway was not able to put it inside the nodes themselves. It worked :) 

20.html:
- Trying to see if we can add nodes just using mouse clicks. Yes, it's working perfectly fine :) This is slightly different from 15.html since 
I modified this into a neat one after looking at the code here: http://bl.ocks.org/929623.

21.html:
- Checking if we can add edges just by clicking on source and target nodes. This code has a problem since I binded the event of        clicking to the node even before the circles are created. Hence the problem. I corrected it, and put it in 22.html.

22.html:
- Checking if we can add edges just by clicking on source and target nodes. This is the perfect code :) But there are some other minor tweaks to be done like making the nodes come above the edges, and to make sure that there is no edge from one node to the same node etc. It    will be done later. Right now, in 23.html I will try to make the node labels visible within the nodes themselves.
- But one can say this is the first proper force layout code that I wrote where I can add nodes using mouse clicks and also add edges using mouse clicks :) 

23.html:
- Trying to display the text inside the nodes, but this code is not working properly for some reason :(

24.html:
- This is same as 22.html except that here the nodes are randomly colored whereas there all nodes are black.

25.html:
- This is Sebastian's modified version of the code that I sent him - 21.html 

26.html:
- This is same as 24.html except that here the nodes are drawn over the edges while it was reverse in the earlier case.

27.html:
- This is same as 26.html except that here the same nodes will not be both source and target.

28.html:
- This is same as 27.html except that here the nodes are just text, and not circles. This is not working :(

29.html:
- This is same as 27.html except that here the tick will be run only a specified no. of times.

30.html:
- Trying to read and write data from a file on the server. I am able to read from the file on the server, and also able to write into  a file on the server using the get method, but only for small amounts of data. Found that the nodes and links are being modified from what I initialized them to be i.e. new attributes are being added by d3 itself when I start the graph. I dont want all of them to be saved in the json file on the server. So in 31.html I will write code for selecting only some of them and sending them to the server using 'get' method.

31.html:
- Here I am able to select the required attributes of nodes and links and send them to the server :) But I cannot use 'get' method if the no. of nodes or links is too high since they are being sent through the url, and there is a limit on url's length. In next file i.e. 32.html, I will try post method to be able to send larger files.

32.html:
- This is same as 31.html except that here I am trying to use 'post' method to send data to server instead of 'get' method which was   used in 31.html. It is working :) But when I click the button, 'Save the graph', it is saving the graph, but no indication is shown. Will try  that modification in 33.html.

33.html:
- This is the same as 32.html except that earlier though the graph was saved, no indication was shown, but now indication is being     shown that it is saved :)
- Later I discovered that after saving the graph, sometimes the new saved graph is not being loaded, but the old unsaved graph is being loaded. Later I discovered that it's not the problem with my code, but the browser is displaying the cached json file i.e. the unsaved one. We need to refresh the entire page for the new saved graph to be shown!

34.html:
- I wrote this file because I thought there is some problem with 32.html. But practically there is no difference between both.

35.html:
- I replaced the 'post' method in 34.html with the ajax code I found here: http://en.wikipedia.org/wiki/JQuery, and created 35.html. This is working perfectly fine :) 

36.html:
- Binding data to elements using the key function instead of the regular index. successful :) 

37.html:
- tried to delete the nodes. only successfully added the delete button etc. but it did not work :( But it is solved in 40.html :) 
- In this I bound data to elements using the key.

38.html:
- since 37.html did not work properly, I tried binding data to elements using normal index, i.e. I ignored the key. Even that did not work properly :( The perfect code is in 40.html :) 

39.html:
- able to add text inside the nodes :) 

40.html:
- option for deleting nodes, successful :) 

41.html:
- The code was not very modular in 40.html. I made it more modular in 41.html :) 

42.html:
- This is similar to 41.html, but trying to tweak some things. For instance I am checking, why after deleting all the nodes, I am      unable to add even two nodes using the mouse clicks on svg canvas. Found the error. It's because there is a difficulty while adding the first node whose key should be one more than the greatest key existing. But the greatest key existing is null. Hence the difficulty, solved it :) 
- Also I find that in 41.html, I had to call restart() twice after deleting a node for it to work properly. don't know why. Trying to solve that here. I couldnt solve it :( I will solve it later.
- Also I could restrict the scope of d3.json function to just around 6 lines. Earlier it spanned the entire code. Now thanks to my modular coding, I could do it without a glitch :) 

43.html:
- In this I am trying to add the select boxes on the right side of the window so that people can specify the type of the node they     want i.e. they will only specify the label to the node. I will choose a color randomly. Later I will add the option, like AGG, if they want to 
choose circle or rectangle or oval etc.

44.html:
- Finally able to make the code modular i.e. am able to add nodes to a particular graph on the click of a mouse or any other event. Am able to pass both the event's 'this', and graph's 'this' to the eventHandler :) 
- Also put all the necessary style rules in a separate stylesheet and included it here.

45.html:
- Right now just trying to add the rules etc. to the json file so that I can read them and also write them back to that file.
done :)

46.html:
- adding the 'name' attribute to the Generative grammar rules object in the code and in the json file. 
- Handling the reading and writing of json file accordingly through the code.
- Creating separate svg's for LHS, RHS (will create for NAC later).
- Able to display a particular rule, right now the first rule in the rules panels in the browser :) 
- Also able to modify the present graph, present rule etc. and then save them on the server :) 

47.html:
- Adding the rules names panel to display all the rule names.
- Also added a button called 'Add Rule' to be able to add rules on clicking this button.
- Also able to display the rule names dynamically as and when a new rule is added.
- Also able to select any rule we want by clicking on the rule name.

48.html:
- Trying to change the layout of the boxes so that they look neat.
- I managed to do something in 48.html and 48.css, but I am not satisfied with it. I did it with complete hit-and-trial method which I didn't like.
- The look is good :) 

49.html:
- This is same as 48.html except that here the code is more optimized.
- But the code here seems to have some small problems. For instance, suppose there are a set of rules already added. Whenever I click on the same rule two different times, two different node labels are appearing, I don't know why.
Tackling them in 50.html.

50.html:
- Tackling the problems of 49.html.
done :) 
- Able to change the background color of the selected node type or rule name.
- Able to check that no empty or redundant node types (or rule names) are added.
- Also made sure that a particular type of node has one particular color only :) 

51.html:
- Added arrow to edges.
- Changed cursor's shape to hand whenever it comes on to nodes or links.

52.html:
- adding functionality to delete edges by clicking on them.
- able to delete node types
- able to delete rules

53.html:
- Making sure that we cannot add more than one edge between the same two nodes.
done :)
- Finally I solved the greatest problem that was troubling me the most !!!!!!!!!!!!!!! :O:O:O:O:O:O:O:D:D:D:D:D:D:D
The main problem was that when I was saving the links, only the key was being saved for some links, but not the source and target node details. The reason is that the way I wrote the code, I assumed that all these graphs will be passed to the force.links() function, and hence all of them will be converted to new objects by the force.start() function. But the point is that they will be passed to the force.links() function only if they become the current_LHS_graph or current_RHS_graph etc. i.e. only when I click on that rule. Otherwise they would never become. My code did not take that into consideration earlier and hence I ran into a problem!! Now I took care of that and there are no worries to worry about :) 

54.html:
- This is same as 53.html. I tried to write the graph matching algorithm, but I did not touch this file for that. I wrote it in a separate file called my_functions.js in scripts dir. 
- I only added a few lines here which point to those functions.

55.html:
- Tried to create separate soft buttons for delete mode, add mode etc.
- This method is not very optimal. So trying the optimal method in 56.html.

56.html:
- This is same as 55.html except that here I made the soft buttons code more optimal by using d3 selections to add those buttons in one go.

57.html:
- changing the nodes from circular to rectangular since now I decided that I will implemented groove style of rules and not AGG style of rules.
done :)

58.html:
- Able to have separate functions while adding nodes to the main graph and while adding nodes to the rule graph :) 
- able to specify node definitions through text prompts.
- also able to show the text inside nodes in different colors the way it is being done in groove.
- I need to add link types which I will do after changing the code to remove current_LHS_graph and current_RHS_graph variables, which I will be doing in the next file i.e. 59.html :) 

59.html:
- writing the code in 59.html for removing the current_RHS_graph and current_LHS_graph variables and putting one single variable in its place to handle groove style of rule graphs.
almost finished it :) 
But the code became too clumsy. I need to clean it.

60.html:
- Making 59.html more saner here.
- First I need to have a standard for the way I name panels, their related lists, and their related 'current value' variables.
- I decided that I will go ahead with the following naming scheme for panels:
rendering panel
rules names panel
graphs names panel
tabs panel
node types panel
link types panel
buttons panel
- And the following naming scheme for lists:
generative grammar rules
graphs
rules names
graphs names
node types
link types
soft buttons
buttons
tabs
- And the following for 'current...' variables:
current_graph
current_graph.type (So there will be no need for separate 'main_graph' and 'current_rule_graph' variables)
current_graph.index (refers to the current index of the current graph type)
current_graph.current_node_type
current_graph.current_link_type
current_graph_name
current_rule_name
current_soft_button
current_tab
- I did it :) 
- Still there are some slight glitches in this file. I will resolve them in 61.html.

61.html:
- Resolving some mistakes which still remain in 60.html.
done :)
- Now the code is perfect !!! ;)

62.html:
- Adding the 'not:' option in node definitions.
- Also made considerable changes to the code to make it more optimal.
- It's perfect :) 

63.html:
- able to show labels on links :) 

64.html:
- solved the problem of updating node types when selecting the rule graph.
Again it was one of the most silliest mistakes :( But I liked the way I solved it - patiently, without doing hit-and-trial etc. :) 
The mistake was that I was using the 'this' variable inside a forEach function thinking that it would be referring to the graph I needed. But I forgot that in the forEach function, it would create its own 'this' which is different from the one I had in mind. Finally discovered that problem and changed the code accordingly :) 

65.html:
- adding the button to match lhs and main graph.
- adding the 'label' attribute separate from 'visible_label' attribute to be able to recognize node types and link types quickly.

66.html:
- created folds etc. and made the file more compact.

67.html:
- adding the button to show a match between lhs and main graph. This will show the matching nodes and edges in a different way than the rest.
- First displaying the list of matching nodes just in the console.

68.html:
- Same as 67.html except that here, apart from displaying the matching nodes in console, I will also make them stand out visually in the editor.
- Also removing the 'apply rule' button. Now all those functions are carried out by the 'show next match' button itself.

69.html:
- Able to update link labels and node labels as per the grammar rules.

70.html:
- Able to add/delete links/nodes according to the grammar rules.

71.html:
- Able to apply transformation rules randomly. 
- Added a button, 'Start Transformation' on pressing which the graph is transformed once using a random rule. I put this in a for loop so that it will transform the graph some 'n' no. of times (the no. which I specify) and then stop.

72.html:
- Able to slow the transformation process and am able to show step by step transformation slowly using the setInterval function.
- Also added a button, 'Stop Transformation' to stop the above transformation process whenever I want.
- Also able to highlight the changed nodes and edges differently.

73.html:
- Able to highlight the particular rule which is being applied during the transformation.
- Also deleted old sample rules and added some basic NVFO rules.
- Also able to give different colors for different types of nodes and edges!

my_functions.v18.js:
- Handled anonymous nodes - both normal and NACs

my_functions.v19.js:
- Handled permutations_with_repetitions code :) 

my_functions.v20.js:
- Handled NAC nodes with labels as well :) Earlier I handled only anonymous NAC nodes.

74.html:
- Made the separation of generative and interpretation rules.
- Added additional variables, changed the css file etc.
- Stored the interpretation rules while saving.
- Also reading the saved interpretation rules.

75.html:
- Added new nodes/edges labels in the main graph node types while transforming the main graph, if necessary.
- Also changed the keys of links accordingly.
- Assigned the 'matched' attribute only if it's a main graph. This is to show the matched nodes and links in main graph in different color.

my_functions.v21.js:
- code for interpreting the graph inductively

76.html:
- added a button for interpreting graph inductively. Called it 'Interpret Graph'.

my_functions.v22.js:
- code for extracting all possible interpretations of graph and storing them in a list.

77.html:
- writing the code in it to show all the interpretations generated by my new function in the console.

78.html:
- writing the code in it to show all the number of interpretations in display so that when I click on a particular number, its corresponding interpretation will be shown in the main graph panel. 

my_functions.v23.js:
- There is some slight error in the earlier code of extracting all possible interpretations. Corrected that in this file.
- But even this doesn't seem to be exact. I will look into it later.

my_functions.v24.js:
- Wrote a code to extract all possible matches between an lhs and main graph.

79.html:
- modified the code to check whether the above function (of extracting all matches) is working or not.
- able to generate all the graphs for a given set of generation rules

80.html:
- There is something missing in 79.html. It's not exactly generating all the kinds of graphs. Correcting it here.
done :) 

my_functions.v25.js:
- changed back the 'extract all interpretations' code to its previous state i.e. not doing a cartesian product of both pred and succ.
- also wrote two functions - extract_relevant_data_from_node and extract_relevant_data_from_link so that I can use them in 80.html, but they seem to be causing some problems if I use them there. So leaving them like that for now.

81.html:
- adding some generation rules
done :)

82.html:
- There seems to be some problem with 81.html. But 80.html seems to be fine. So copying it to 82.html and working with that.

my_functions.v26.js:
- changed 'D' to 'Dr' for dravya in this file
- made some changes in its css file as well.
- adding the following rules:
append_to_conjunct, append_to_disjunct

my_functions.v27.js:
- changed 'Dr' to 'Sw' in this file, and also changed the rules accordingly.
- when I am extracting the list of all interpretations of a given graph, I am getting an anomaly that once the nodes are interpreted in some other step, the same interpretation of that same node is shown in this step as well even though that node is not interpreted here. To correct that, I am adding a default interpretation (at level 0) where all entities are again labelled as 'E'. So anytime I can go to this default state before I do any interpretation to understand whether an interpretation is interpreting all the nodes or not. Also changing 82.html accordingly and storing the new code in 83.html.

83.html:
- changed 82.html according to the changes in the my_functions.v27.js code and storing the new code here.
- also enabling coloring a particular interpretation number when it is clicked.
Finally I found the problem in my code. The problem is in the extract_all_interpretations function. It is not doing its job properly and hence I was getting an error. So making those changes in a new my_functions.js file.

my_functions.v28.js:
- changing the extract_all_interpretations function code.
done :)
Now it's working perfectly fine :) 

my_functions.v29.js:
- adding some comments in the match function.

84.html:
- modifying the code to add an NAC panel, NAC button, then save NACs and to retrieve them from the json file, etc.
done :) 
It's working perfectly fine. Shows that my code has been perfectly modular :) 

85.html:
- Copy of 83.html since I need to show some things to Navjyoti sir which I cant do in 84.html. Will use 84.html later.
- adding more rules from paper to here.

my_functions.v30.js:
- adding some more comments to the match function.
- Also added the code to prevent cycles in LHS matching with non-cycles in main graph.

my_functions.v31.js:
- modifying the code - removing all the lines related to NACs in the matching functions since we will represent NAC graphs sepearately and use the same matching function to match NAC graphs with the main graph.

my_functions.v32.js:
- Tested if it's ok if we store only the key and label of the nodes and edges while extracting relevant data from them. It worked :) But still, I just commented those lines, did not delete them. Will enable them later if necessary.

86.html:
- Copy of 84.html. 
- Made sure that the NAC names should be such that they include the rule name (of whose NACs they are), then a space and then NAC1,2,3 etc. Since the name pattern is fixed, didnt give a prompt box for this. Directly added the NAC with the default pattern name and let the user specify the graph for this name.

87.html:
- Modified the code so that when you click on a rule (both interpretation and generative rules), only its NACs are shown in the NACs panel.
- Also handled other things like when you delete a rule (both interpretation and generative rules), all its NACs are also deleted.

88.html:
- Changing the current code to add the NACs also in the same way as generative or interpretation rules (Currently they are following the code which is being followed to add the main graphs which will create a problem for me while running the 'sub_match' code).

89.html:
- After adding the rules and NACs as usual, we will go into map mode.
- Then when we click on some node, it will ask us to give a mapping number to that node.
- If it is an NAC node, we will give a single number to that. If it is an LHS node, we will give an array of numbers to that since multiple NACs nodes may map to this same node with different mapping numbers.

90.html:
- Wrote the code for getting the final matches between LHS and main graph after considering its NACs also.
- But dont know if it's working or not since it is get stuck because of an error in my_functions.js file. First I should solve that.

my_functions.v33.js:
- Solved the error I was facing earlier. It was a very silly mistake.

91.html:
- Just minor changes compared to 90.html. This code works for crosschecking nac_matches and lhs_matches i.e. getting the final matches between LHS and main graph after considering its NACs also. But this cannot currently match LHS which has more than 1 level of inherence. I will handle that later.
- This along with my_functions.v33.js is working fine except for some minor changes here and there which are not very significant.

my_functions.v34.js:
- There is a slight mistake in my_functions.v33.js. Solved that here.

92.html:
- Added more rules and NACs here.
- Made the last graph name the current graph name after pressing the 'Show All Generations' button. Earlier the highlighter was on graph0 always even though the rendering panel showed some other graph after the button was pressed.

93.html:
- Made sure that only the matches in the current graph are highlighted, not every graph.
- Also highlighted the name of the particular graph in focus.
- Solved the problem of the fatal error which comes when you press the 'show next match' button when there is no match between lhs and main graph.

94.html:
- when the 'new NAC' button is pressed made sure the NAC name is highlighted beside just being displayed in the NAC names panel.
- solved a minor problem in the function refine!

my_functions.v35.js:
- Solved the problem of handling anonymous nodes. I sat and checked how the code proceeds line by line and found out that the error was in the way I was pushing the anonymous node into lvp. When I am pushing the node into lvp, I am pushing it with the assigned label already whereas I should push an anonymous node if it were an anonymous node originally. This was the mistake. When I solved it, everything got solved!!!! :D:D:D:D:D

95.html:
- Solved the problem of svg canvas in this. Manually set its size so that it occupies the entire rendering panel. From now the code works both in chrome as well as firefox :) 

96.html:
- Temporary file for testing some things. Here I am testing the following things.
- Whether my code can handle rules where a start node, say g, can generate two disconnected new nodes - h and i. (yes)
- Whether the initial node which my code checks can have del or new in it and the code still works as expected? (The initial node can have 'del::' in it, but not 'new::' or 'not::'.
- Anyway, now that doesn't matter to me because I am implementing a new feature in this code. I am asking for the following two features of LHS while creating LHS itself: (1) no. of disconnected subgraphs in it and (2) representative nodes' keys for each of those subgraphs, separated by commas. Will use this information in handling disconnected subgraphs in my matching algorithm in my_functions.js file.

my_functions.v36.js:
- modifying match() function to handle disconnected subgraphs of LHS of a rule.
- Using the information like no. of disconnected subgraphs of LHS, and each of their representative nodes which I got as input from the user in the html file.

my_functions.v37.js:
- modifying extracting_all_matches function according to the new match() function. 
- Earlier the child of the root node of all_matches object was a list of current_node_obj's. Now it's a list of lists of current_node_obj's. So modifying extracting_all_matches function in such a way that I do a cartesian product of all the current_node_obj's of the innermost list and finally get a list of lists where each list is a list of nodes of mg which are matching with LHS.

my_functions.v38.js:
- adding a new function, match_final(), in my_functions.js file.
- This function will run, inside it, match() function, and then extracting_all_matches() function and then return the final matches to the calling function (usually in html file). 
- Should modify the code in html file also accordingly. Doing it in next html file.

97.html:
- modified some lines in the code according to the new match_final() function in my_functions.js file.
- There are some lines in the code where we need the previous case of extracting all possible paths first, in order to extract a random path from that. Did not modify those lines right now since I am not really using any of the functions where these lines are there. Left them just like that. Will modify them later if necessary.
- modified 'new_NAC' button function also so that the user has to specify the no. of disconnected subgraphs, and the representative nodes for each of them here also the way he does while creating a new generative rule.
- It seems two types of edges seem to be possible between the same pair of nodes. Correcting that part in my html file. 
- Modifying the replace_add_links function in my html file to compare the keys, ignoring node types, of incoming link (from RHS) and already existing link from mg. If they are same, then new link cannot be added.
- Also added some more rules from the paper. Whatever I added till now, the software seems to be handling them quite nicely :) 

98.html:
- Want to optimize the code further. I want to skip the entire replace_lhs_with_rhs() step if there is a rule which adds an edge between the same pair of nodes. Unable to do it right now. Will try it again some other time.
- Handling the exclamation mark. In html code, making a very small modification. Whenever there is an edge like, say !in, I will give 'in' as label to that edge, but keep the entire '!in' in the visible_label attribute and definition attribute and marker id attribute of that edge.
- Will use this marker id attribute in my_functions.js while handling these edges.

my_functions.v39.js:
- writing code for handling exclamation marks with edges. 
- Taking all matches from match function, and then removing those matches which have an edge with exclamation mark in them.
- This code did not work. Finding the mistake and keeping the right code in my_functions.v40.js file.

my_functions.v40.js:
- Found the mistake.
- The mistake is that I need to treat p and q (assuming the edge is p -!in-> q) as if they dont have an edge between them while creating the LHS. 
- So while creating LHS I should give both as representative nodes when asked for.
- And also in the successors function I should make sure that this edge is not matched for the p in LHS. If it gets matched for the p in LHS, it won't get matched for the p in mg because the q in mg is already put in visited nodes list and wont turn up again. Hence it seems that LHS has an extra q which mg doesnt have and hence the match at all doesnt happen. So I put a new condition asking the code to skip when it encounters a negative edge.
- The only use of the negative edge is there when we are filtering the final matches from all matches. Then we will use this edge to get those matches in mg which have p and q and also this edge between them and remove those matches from all matches. 
- While coding this I also found that we cannot use a command like if(a in b) where a is {key:value} and b is [{key:value}]. It seems you cannot use this 'in' operator when the list is a list of objects!! This is because you cannot compare two objects themselves to check whether they are equal or not!! Took a lot of time to realize this!!
- But it seems the problem is still not solved. There still seems to be a small glitch - I dont know what. When I am using a negative edge in an NAC, it is not working under some particular conditions. Will solve it later.

my_functions.v41.js:
First specified almost all the generative rules, not interpretation rules. It's running fine when I ran it on the first 100 graphs. But when I ran it on the first 1000 graphs, it has taken more than 10mins. but still no result. So I really need to optimize the code. One good possibility of optimization is to avoid graphs are which are creating new edges between the same pair of nodes (I actually stopped the replacement, but not the counting of new graph as such). Got an idea as to how to avoid it just now!! I can use the same code which I am using to avoid negative edges to avoid these cases also.
doing that.
done :) finally :) 
Found that initially I was checking only for the presence of the same type of edge between two nodes, and then avoiding its insertion there. Now I modified my code in such a way that a new edge cannot come between a pair of nodes if they already have an edge, of any type, between them!! :) 
Still the code is running slow. I thought of one more way of optimizing it - to avoid duplicate graphs for symmetric edges like conjunct/disjunct etc. Will handle it in next version of my code.

my_functions.v42.js:
- Moved the code of handling negative edges into a separate function called filter_matches_with_negative_edges.
- And not using this function from next code because after recent discussion with Navjyoti sir I found that I need not create smallest universals - like those which inhere in just two instances. Lower universals are created as and when subcategories are discovered. 
- So the code which I have been using to create wholes, similar code I just need to use for universals and make sure universals related to each of the categories defined till now - conjunct, disjunct, quality, whole, MUS, UUS - are created. That's all.

my_functions.v43.js:
- commented the line calling the function filter_matches_with_negative_edges.
- Found that the reason for duplicate graphs is not as simple as symmetric edges like conjunct/disjunct. It's more complex than that (details in ms readme file).
- As of now I am dealing with this problem in a simpler way (hence not able to avoid all duplicate graphs, but most of them) - I am checking if the same pair of nodes in main graph (between whom the incoming structure is going to fit in) is matching with the same pair of nodes of LHS in a swapped manner as well then I am deleting the (entire) second match because all my incoming structures are atomic i.e. there is no more incoming structure left to check for.
- This I am writing in a separate function since this is specific to my grammar, not any grammar in general, so that I can disable this function/module anytime in future.
- It seems I have no such rule where the labels of nodes (to be in conjunct/disjunct) are same but their matching nodes are not swappable. So the only condition I need to check to know if the pair of nodes is swappable or not is to check whether both the nodes have same label or not. That's all.
- So first doing it for two cases - conjunct and disjunct. Will do for whole (q) and universal (s) later.

my_functions.v44.js:
- Now handling the remaining two incoming structures: whole (q) and universal (s). Removing duplicate graphs which come from them.
done :) 

99.html:
- Layered the rules.
- Introduced some variable called rule_implementation_structure. It's a string of instructions which are delineated by semicolons from each other, and each instruction has some keyword followed by colon followed by a list of rules instructions.
eg: ALL,#,r1;TG,+,r2;SUPERSET,#,r30;TG,#,r3,r4; (every word here needs to have quotations around it which I did not put right now)
here # means apply the rules in the given layer till the end, maximum extent possible
'+' means random no. of times, but the same random no. of times for all the graphs taken from the previous layer
SUPERSET will be the final set of graphs in a given layer. The size of this set will be the same as the size of graphs in previous layer (our rules are such).
ALL - TGs and NTGs of previous layer where TG (terminal graph) and NTG (non-terminal graph).
- moved the old show_all_generations function to show_all_generations_old.
- There was an error in refine() function. Solved it as well. 
- The error was that even if one NAC mapped main graph node matches with one lhs mapped main graph node, the entire lhs match is rejected. Made sure that all the nodes mapped in NAC are checked for.

100.html:
Now adding more and more rules.
After I started adding the rule of conjuncts/disjuncts between wholes, generated by just 3 UUS and 3 MUS, the system is running forever, and the memory also got close to 100% and the CPU got heated up very much. Even after around 20mins. no result :( So I just had to kill it :( 

101.html:
I think the only solution to this extravagant usage of memory is to remove duplicate graphs. It may take some extra time, but it will save a lot of memory and also CPU power later.
So writing a few more lines of code to remove the duplicate graphs. Couldnt achieve it right now because I need to handle disconnected subgraphs in main graph also before matching one main graph with another one. Will do it later. Commented that code as of now.
Made a slight modification in the code (queue.end value) such that from next time I can start from any layer of graphs, not necessarily always from the first one :) 
Found that I shouldn't put a semicolon at the end of the rule implementation structure. It will lead to grave error!! I need to put semicolons in between only!!

102.html:
- Just made sure that rule implementation structure doesnt become null when we press 'cancel' button instead of 'ok'.
- Also made sure that match_object.main_graph_index is set to queue.start at all necessary places.

103.html:
- Trying to remove duplicate graphs. Seems to be a very tough task!! 
- Almost did it.
- Wrote a function called representative_nodes_list_for_main_graphs() to calculate the representative_nodes_list for each of the main graphs so that match() function can be used on them as well.
- Now some slight modifications need to be done in my_functions.js file (handling lines with definition.slice phrase). Doing that.

my_functions.v45.js:
- handling lines with definition.slice phrase since that doesnt apply when lhs is main graph itself.
- solved the problem of graph matching (main graph with main graph). It's just a small error - overlooked some terminal conditions while popping elements from lvp and mvp in sub_match function. And it took me a whole lot of time to figure this out!!

104.html:

